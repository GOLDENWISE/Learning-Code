html,
body {
  margin: 0;
  padding: 0;
  font-family: arial;
  font-size: 30px;
  text-align: center;
  font-weight: bold;
  color: white;
  background-color: black;
}

.container {
  margin: 30px;
  border: 4px solid #333;
  padding: 5px;
  box-sizing: border-box;
  display: grid;
  grid-template-areas:
    "header header"
    "aside main"
    "nav main"
    "footer footer";
  grid-template-columns: 1fr 1.5fr;
  grid-template-rows: 1fr 1fr 1.3fr;
}

header {
  grid-area: header;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #b063d8;
}

aside {
  grid-area: aside;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #2f93ff;
}

nav {
  grid-area: nav;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #e45765;
}

main {
  grid-area: main;
  line-height: 300px;
  background-color: #e0aa77;
  box-sizing: border-box;
}

footer {
  grid-area: footer;
  padding: 20px 0;
  background-color: #666;
}

.container-2 {
  width: 60%;
  margin: 50px 35px;
  height: 600px;
  display: grid;
  background-color: white;
  grid-template-columns: repeat(3, 200px) [akhir] 200px;
  grid-auto-flow: column;
  grid-template-rows: 150px 150px 150px;
  grid-auto-columns: 100px;
  gap: 5px 4px;
  justify-items: center;
  align-items: center;
  justify-content: space-evenly;
  align-content: space-evenly;
}

.v1 {
  grid-row-start: 1;
  grid-row-end: 2;
  grid-column-start: 1;
  grid-column-end: 2;
  justify-self: start;
  align-self: start;
}

.v2 {
  grid-area: 1 / 2 / span 1 / span 1;
  justify-self: end;
  align-self: end;
}

.v3 {
  grid-row-start: -4;
  grid-row-end: span -1;
  grid-column-start: -3;
  grid-column-end: span 1;
  justify-self: center;
  align-self: center;
}

.v4 {
  grid-row: 1 / span 1;
  grid-column-start: akhir;
  grid-column-end: span 1;
  place-self: stretch; //align-self: stretch dan justify-self: stretch;
}

.item {
  background-color: rgb(138, 209, 254);
  /* display: flex;
  justify-content: center;
  align-items: center; */
}

.item:nth-child(even) {
  background-color: rgb(255, 142, 142);
}

img {
  width: 100%;
  display: block;
}

.gallery {
  width: 80%;
  margin: auto;
  padding: 0;
  border: 10px solid white;
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
}

/* penjelasan syntax */
/*
istilah pada grid
grid container: elemen pembungkus grid, untuk mendefinisikannya, tuliskan display: grid; pada suatu element html (tag, .class, #id, dan semacamnya)
grid item: elemen yang ada pada container yang telah didefinisikan sebagai grid container
grid line: garis horizontal (kolom) atau vertikal (baris) yang memisahkan item grid menjadi beberapa bagian (ditandai dengan angka jika dilihat pada grid inspector).
grid cell: satu potongan dari berbagai perpotongan baris dan kolom pada grid yang sebelumnya telah dipisahkan oleh grid line
grid area: kumpulan dari grid cell yang membentuk kotak
grid track: ukuran dari satu grid cell secara horizontal ataupun vertikal (satuan fr)
grid gap: jarak antara grid cell dengan grid cell yang lain
________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

property yang digunakan pada container
  grid-template-areas: memberikan templates area dengan nama yang ditentukan
  grid-template-columns: track-size ... | [nameline] track-size ... => ukuran memberikan ukuran setiap track columns, satuan yang digunakan adalah fr (fraction) px (pixel), %(persen), auto.
  grid-template-rows: track-size ... | [nameline] track-size .. => memberikan ukuran track setiap rows, satuan yang digunakan adalah fr (fraction) px (pixel), %(persen), auto(ukuran yang diambil merupakan sisa dari total ukuran baris yang terpakai pada container).
  pada grid-template-columns | rows, jika yang dituliskan hanya track-size saja, maka hal yang akan dibuat pada grid tersebut adalah membuat banyak columns pada berdasarkan banyak ukuran yang ditulis. (cth, grid-template-columns: 15px 20px 25px => 3 columns.)
  sedangkan pada grid template rows, hanya mengatur satu baris yang ditentukan saja. (cth, grid-templates-rows: 20px => hanya mengatur baris pertama dengan ukuran 20px. sisanya mengikuti ukuran secara default atau implisit)
  
  gunakan grid-template untuk mempersingkat syntax diatas
  cth: grid-template-rows: 50px 100px
       grid-template-columns: 1fr 2fr
       grid-template-areas: 'header header header' 'footer footer footer'
        |
        v
       grid-template: 'header header header' 50px 'footer footer footer' 100px / 1fr 2fr
  syntax=> grid-template: grid-template-areasrow1 grid-template-rows1 grid-template-areasrow2 grid-template-rows2 ... / grid-templates-columns1 grid-templates-columns2 ... 
  
  column-gap: jarak antar kolom cell
  row-gap: jarak antar baris cell
  gap: jarak antar kolom dan baris cell => gap: row-gap column-gap; 

  untuk mengatur ukuran default baris atau kolom, gunakan syntax grid-auto-columns pada kolom atau grid-auto-rows pada baris 
  grid-auto-columns: track-size;
  grid-auto-rows: track-size;

  grid-auto-flow: row | column | row dense | column dense => mengatur penempatan item pada grid track, secara otomatis (cth: grid-auto-flow: column; jika row yang didefinisikan hanya 2 saja dan item yang ada pada container lebih dari 2, maka item tersebut akan diisi berdasarkan row yang didefinisikan terlebih dahulu, 
  untuk kemudian, sisa dari item tersebut akan ditambahkan ke kolom, begitu seterusnya) (pada flex, bisa disebut sebagai flex-direction). secara default, nilainya adalah row
  
  special function & keyword: 
    repeat(banyakpengulangan, track-size): digunakan untuk menentukan grid track secara berulang. biasa digunakan saat menentukan grid-template-column atau grid-template-rows. yang mana, banyak pengulangan akan berbanding lurus dengan banyak pendefinisan
    
    min-content & max-content: digunakan untuk menentukan besar ukuran grid track (horizontal atau vertikal) berdasarkan content pada suatu item. biasa digunakan saat menentukan grid-template-column atau grid-template-rows
      min-content: besar ukuran grid track akan digunakan seminimal mungkin. semisal content pada suatu item terdapat dua kata(dipisahkan dengan spasi), maka ukuran content akan diambil berdasarkan panjang huruf pada kata yang paling panjang. sedangkan kata lainnya akan diposisikan dibaris baru di item yang sama 
      max-content: besar ukuran grid track akan digunakan semaximal mungkin. semisal content pada suatu item terdapat dua kata(dipisahkan dengan spasi), dua kata tersebut akan berada dibaris yang sama. sehingga, ukuran dari item tersebut akan menyesuaikan panjang dari dua kata tersebut, begitu juga jika banyak katanya lebih dari yang disebutkan tersebut 
    
    minmax(ukuranminimal, ukuranmaximal): digunakan untuk menentukan ukuran minimal dan maximal dari grid track(biasa digunakan pada grid-template-columns atau grid-template-rows)
      semisal ukuranmaximal suatu track mencukupi pada container, saat ukuran container diperkecil, maka track yang diberikan properti minmax ini akan mengecil hingga nilai minimal. jika telah mencapat nilai minimal, maka track tersebut akan berhenti mengecil 
      properti minmax ini juga bisa digunakan pada keyword repeat

    auto-fill & auto-fit: menentukan jumlah item pada grid track (biasa digunakan pada keyword repeat=> repeat(auto-fill | auto-fit, track-size))
    biasanya, keyword ini berguna untuk membuat website responsive. semisal, ukuran container dapat diisi 3 item setiap barisnya. saat ukuran baris container diperbesar, maka item pada container yang dibawah akan naik ke atas secara otomatis. begitu juga sebaliknya, jika ukuran container diperkecil, maka item yang ada diatas pada container akan dipindahkan kebawah       
    perbedaan auto-fill dan auto-fit adalah, jika item pada container sedikit, namun container menyisakan satu track yang sebenarnya cukup untuk diisi kolom lain, oleh auto-fill akan dianggap bahwa sisa dari track tersebut terpakai, sehingga area gridnya akan ada hingga area sisa track tersebut. berbeda dengan auto-fill, auto-fit akan menganggap bahwa area tersebut tidak ada, sehingga grid-area akan berhenti pada item terakhir pada container tersebut

    justify-items: start | end | center | stretch: mensejajarkan grid-item pada sumbu horizontal
    start: semua grid-items pada grid akan mepet ke kiri grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    end: semua grid-items pada grid akan mepet ke kanan grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    center: semua grid-items pada grid akan mepet ke tengah-tengah grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    stretch: sisi kanan dan kiri dari grid-items akan menempel ke sisi kanan dan kiri grid-tracknya masing masing (dengan syarat, masing-masing grid-items tidak memiliki lebar yang didefinisikan)

    align-items: start | end | center | stretch: sama seperti justify-items, hanya saja align-items pada sumbu vertikal
    start: semua grid-items pada grid akan mepet ke atas grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    end: semua grid-items pada grid akan mepet ke bawah grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    center: semua grid-items pada grid akan mepet ke tengah-tengah grid-tracknya masing masing dan ukuran tracknya menyesuaikan ukuran content yang ada pada grid-item
    stretch: sisi bawah dan atas dari grid-items akan menempel ke sisi atas dan bawah grid-tracknya masing masing (dengan syarat, masing-masing grid-items tidak memiliki tinggi yang didefinisikan)

    place-items: align-items justify-items => shorthand yang digunakan untuk mensejajarkan item secara horizontal
    jika align-items dan justify-items yang akan kita tentukan memiliki posisi yang sama (sama sama start atau end atau stretch atau center), 
    maka, pada place-items cukup tuliskan salah satu properti (start | end | stretch | center).
    namun jika berbeda, masing - masing properti harus dipisahkan dengan spasi

    justify-content: mengatur posisi seluruh content pada grid-container secara horizontal (dengan syarat ukuran total grid-items < ukuran grid-container dan ukuran grid-container telah ditentukan(width))
    justify-content: start | end | center | stretch | space-around | space-between | space-evenly
    start: semua grid-items pada grid-container akan mepet ke kiri grid-container dan akan membentuk suatu grid area
    end: semua grid-items pada grid-container akan mepet ke kanan grid-container dan akan membentuk suatu grid-area
    center: semua grid-items pada grid-container akan mepet ke tengah-tengah grid-container secara horizontal dan akan membentuk suatu grid-area
    stretch: sisi kanan dari grid-items paling kanan akan menempel ke sisi kanan grid-container dan sisi kiri dari grid-items paling kiri akan menempel ke sisi kiri grid-container dan akan membentuk suatu grid-area
    space-around: memberikan jarak antara grid-itemsnya. dengan jarak dari grid-items paling kanan dengan sisi kanan container sama dengan jarak antara grid-items paling kiri dengan sisi kiri grid-container. dan jarak grid-items paling kiri dan paling kanan ke grid-items sebelahnya akan sama dengan 2 kali lipat dari jarak grid-items paling kiri ke sisi kiri atau jarak grid-items paling kanan ke sisi kanan
    space-between: memberikan jarak antara grid-itemsnya. dengan sisi kanan dari grid-items paling kanan menempel dengan sisi kanan grid-container dan sisi kiri dari grid-items paling kiri menempel dengan sisi kiri grid-container. sedangkan sisa ruang yang tersedia pada grid container secara horizontal akan dibagi rata sebagai jarak antar grid-items paling kanan dengan grid-items selanjutnya dan grid-items paling kiri dengan grid-items selanjutnya
    space-evenly: jarak yang diberikan antara sisi kanan dari grid-items paling kanan dengan sisi kanan grid-container, sisi kiri dari grid-items paling kiri dengan sisi kiri grid-container dan jarak antar grid-itemsnya pada container itu sama besar secara horizontal
    
    align-content: mengatur posisi seluruh content pada grid-container secara vertikal (dengan syarat ukuran total grid-items < ukuran grid-container dan ukuran grid-container telah ditentukan(height))
    align-content: start | end | center | stretch | space-around | space-between | space-evenly
    start: semua grid-items pada grid-container akan mepet ke atas grid-container dan akan membentuk suatu grid area
    end: semua grid-items pada grid-container akan mepet ke bawah grid-container dan akan membentuk suatu grid-area
    center: semua grid-items pada grid-container akan mepet ke tengah-tengah grid-container secara vertikal dan akan membentuk suatu grid-area
    stretch: sisi atas dari grid-items paling atas akan menempel ke sisi atas grid-container dan sisi bawah dari grid-items paling bawah akan menempel ke sisi bawah grid-container dan akan membentuk suatu grid-area
    space-around: memberikan jarak antara grid-itemsnya. dengan jarak dari grid-items paling atas dengan sisi atas container sama dengan jarak antara grid-items paling bawah dengan sisi bawah grid-container. dan jarak grid-items paling bawah dan paling atas ke grid-items diatas atau dibawahnya akan sama dengan 2 kali lipat dari jarak grid-items paling bawah ke sisi bawah atau jarak grid-items paling atas ke sisi atas
    space-between: memberikan jarak antara grid-itemsnya. dengan sisi atas dari grid-items paling atas menempel dengan sisi atas grid-container dan sisi bawah dari grid-items paling bawah menempel dengan sisi bawah grid-container. sedangkan sisa ruang yang tersedia pada grid container secara vertikal akan dibagi rata sebagai jarak antar grid-items paling atas dengan grid-items dibawahnya dan grid-items paling bawah dengan grid-items diatasnya
    space-evenly: jarak yang diberikan antara sisi atas dari grid-items paling atas dengan sisi atas grid-container, sisi bawah dari grid-items paling bawah dengan sisi bawah grid-container dan jarak antar grid-itemsnya pada container itu sama besar secara vertikal

    place-content: align-content justify-content => shorthand yang digunakan untuk mensejajarkan item secara vertikal
    jika align-content dan justify-content yang akan kita tentukan memiliki posisi yang sama (sama sama start atau end atau stretch atau center), 
    maka, pada place-content cukup tuliskan salah satu properti (start | end | stretch | center | space-around | space-between | space-evenly).
    namun jika berbeda, masing - masing properti harus dipisahkan dengan spasi
__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
  
property yang digunakan pada masing masing item pada container
  grid-area: memberikan nama area pada suatu tag, class, id, dsb
  selain berfungsi untuk memberikan nama area, grid-area juga dapat digunakan sebagai shorthand untuk grid-column-start|end dan grid-row-start|end
  grid-area: name | row-start / column-start / row-end / column-end

  untuk penggunaan grid ini, disarankan menggunakan visualisasi dari mozila firefox
  grid-column-start:mulai dari kolom apa  -|
  grid-column-end:berakhir di kolom apa - -|
  grid-row-start:mulai dari baris apa  -- -|--> menentukan tempat dari grid-item dengan mengacu pada nomor atau nama grid line yang spesifik
  grid-row-end:berakhir dibaris apa ----- -|
  grid-column-start | grid-column-end | grid-row-start | grid-row-end: <nomor> | <nama> | span <nomor> | span <nama> | auto; 
  <nomor>|<nama> : mengacu pada nomor atau nama yang kita beri pada grid line
  span <nomor>: item akan memanjang / melebar sampai sejumlah nomor yang diberikan
  dengan kata lain, jika menuliskan nomor atau nama akan sampai pada area yang dituju
  namun jika ditambahkan dengan keyword span, maka areanya akan bertambah hingga nilai yang ditentukan atau nama yang ditentukan
  dengan keyword span, jika -1 maka berkurang 1, jika 1, maka memanjang sebanyak 1 
  untuk penulisan shorthandnya, adalah dengan syntax grid-column: grid-column-start /grid-column-end untuk grid-column, dan grid-row: grid-row-start / grid-row-end untuk grid-row

  justify-self: mengatur posisi item yang ada pada sebuah cell terhadap sumbu horizontal
  justify-self: start | end | center | stretch
  start: posisi item pada cell akan dempet ke sisi kiri suatu cell
  end: posisi item pada cell akan dempet ke sisi kanan suatu cell
  center: posisi item pada cell akan dempet ke tengah secara horizontal pada suatu cell
  stretch: suatu konten atau item pada suatu cell akan memenuhi ukuran cell secara horizontal
  secara default, ukuran yang digunakan adalah stretch atau ukuran yang telah ditetapkan pada justify-items
  justify-self ini sama dengan justify-items, hanya saja perbedaannya adalah justify-self berlaku hanya pada properti yang diberikan pada item
  sedangkan justify-items berlaku untuk seluruh item pada container dan tidak diberikan property justify-self
  
  align-self: mengatur posisi item yang ada pada sebuah cell terhadap sumbu horizontal
  align-self: start | end | center | stretch
  start: posisi item pada cell akan dempet ke sisi atas suatu cell
  end: posisi item pada cell akan dempet ke sisi bawah suatu cell
  center: posisi item pada cell akan dempet ke tengah secara vertikal pada suatu cell
  stretch: suatu konten atau item pada suatu cell akan memenuhi ukuran cell secara vertikal
  secara default, ukuran yang digunakan adalah stretch atau ukuran yang telah ditetapkan pada align-items
  align-self ini sama dengan align-items, hanya saja perbedaannya adalah align-self berlaku hanya pada properti yang diberikan pada item
  sedangkan align-items berlaku untuk seluruh item pada container dan tidak diberikan property align-self

  place-self: align-self justify-self
  gunakan place-self sebagai shorthand atau penulisan singkat dari align-self dan justify-self
  jika nilai yang diberikan pada align-self dan justify-self sama, maka cukup cantumkan satu nilai properti saja pada place-self

untuk pengimplementasiannya dapat dilihat diatas penjelasan ini
*/
